{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"서지환의 블로그","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"Async function: 비동기 함수를 처리하기 위한 함수로, Promise를 사용하여 결과를 반환한다. MDN MDN의 예시를 통해 이해해보자 Description async 함수에는 await식이 포함될 수 있다. await는 async 함수의 실행을 일시 중지하고 전달 된 Promise의 해결을 기다린 다음 async 함수의 실행을 다시 시작하고…","fields":{"slug":"/JS/2020-08-04-Async-function/"},"frontmatter":{"date":"August 04, 2020","title":"[JS] Async-function","category":"JS","draft":false}}},{"node":{"excerpt":"day 8: HTML 5 Canvas day 8에서는 canvas를 이용하여 화면에 그림을 그려보았다. MDN: Canvas\ncanvas element에 접근하여 getContext()를 실행하면 렌더링할 수 있는 method에 접근할 수 있다. 위에서 2d옵션을 이용하면 CanvasRenderingContext2D 인터페이스를 사용할 수 있다.\nMDN:…","fields":{"slug":"/JS/2020-07-31-Vanilla-JS-8day-review/"},"frontmatter":{"date":"July 31, 2020","title":"[JS] Vanilla JavaScript day 8: HTML 5 Canvas","category":"JS","draft":false}}},{"node":{"excerpt":"day 7: Array Cardio Day 2 day 7에서는 Array의 method인 some, every, find, findIndex를 사용해 보았다. 주어진 데이터는 다음과 같다. 1. some()을 통해 19살 이상인 사람이 있는지 찾기 some()은 배열의 요소중 하나라도 조건을 만족한다면(true를 반환한다면)\n최종 값이 true가 되고 이…","fields":{"slug":"/JS/2020-07-30-Vanilla-JS-7day-review/"},"frontmatter":{"date":"July 30, 2020","title":"[JS] Vanilla JavaScript day 7: Array Cardio Day 2","category":"JS","draft":false}}},{"node":{"excerpt":"day 6: Ajax Type Ahead day 6에서는 api를 통해 도시들의 정보들을 가져오고 검색을 통해 원하는 도시를 검색해 보았다. 위의 url을 통해 data를 전달 받을 수 있다.\nfetch는 비동기 처리를 돕기 위해, promise를 return한다. 스트림을 모두 전달받고 JSON으로 바꾼다. 최종적으로 cities가 참조하는 배열에 데이…","fields":{"slug":"/JS/2020-07-30-Vanilla-JS-6day-review/"},"frontmatter":{"date":"July 30, 2020","title":"[JS] Vanilla JavaScript day 6: Ajax Type Ahead","category":"JS","draft":false}}},{"node":{"excerpt":"Promise: 동기적으로 처리를 하기 위한 약속 fetch는 자바스크립트에서 서버에 request를 보내고 새로운 정보를 받아올 때 사용된다. fetch는 기본적으로 Promise를 반환한다. 최악의 상황으로 request를 보내고 서버로 부터 body를 받기 까지 1시간이 걸렸다고 생각해보자. 만약 동기적으로 모든 코드가 진행된다면, 서버의 응답을 기…","fields":{"slug":"/JS/2020-07-29-Promise/"},"frontmatter":{"date":"July 29, 2020","title":"[JS] Promise","category":"JS","draft":false}}},{"node":{"excerpt":"day 5: Flex Panels Image Gallery CSS의 Flexbox layout을 이용하여 이미지 갤러리를 만들어 보았다. Flexbox  부모 요소에 display: flex, flex-direction을 row로 설정하면 하나의 행안에 여러 열의 box형태로 layout을 구성할 수 있다. 또한 flexbox 내부의 요소들은 길게 늘어나…","fields":{"slug":"/JS/2020-07-27-Vanilla-JS-5day-review/"},"frontmatter":{"date":"July 27, 2020","title":"[JS] Vanilla JavaScript day 5: Flex Panels Image Gallery","category":"JS","draft":false}}},{"node":{"excerpt":"day 4: Array Carido Day1 day 4에서는 Array의 method(filter, map, reduce, sort)들을 사용해 보았다. 주어진 data는 다음과 같다. 1. filter()를 이용해 15세기에 태어난 발명가들을 구하기  filter를 이용하여 각 element에 통과할 수 있는 조건을 arrow function으로 전달한…","fields":{"slug":"/JS/2020-07-26-Vanilla-JS-4day-review/"},"frontmatter":{"date":"July 26, 2020","title":"[JS] Vanilla JavaScript day 4: Array Carido Day1","category":"JS","draft":false}}},{"node":{"excerpt":"day 3: Update CSS Variables with JS day 3을 통해 CSS에 변수를 처음 사용해 보았다. 관련 링크\nw3schools :root에 —를 이용하여 global custom property를 정의하고, var()함수를 이용해 property를 사용할 수 있다. 해당 property를 JavaScript로 적절히 수정해보자 각각의…","fields":{"slug":"/JS/2020-07-25-Vanilla-JS-3day-review/"},"frontmatter":{"date":"July 25, 2020","title":"[JS] Vanilla JavaScript day 3: Update Css Variables with JS","category":"JS","draft":false}}},{"node":{"excerpt":"this: determined by how a function is called (runtime binding). JavaScript에서 this는 호출 방법에 따라 결정된다. Global context에서 this는 Global object이고 browser에서는 Global object가 object Window이다. 함수에서 this는 함수 호출 방…","fields":{"slug":"/JS/2020-07-25-this/"},"frontmatter":{"date":"July 25, 2020","title":"[JS] this","category":"JS","draft":false}}},{"node":{"excerpt":"day 2: Clock div로 원 표현하기위해 height와 width를 같게 지정하고 border-radius값을 50%로 설정한다. image 시침,분침,초침의 position은 absolute로 설정한다.\n부모의 position을 relative로 설정하고, 시침,분침,초침의 top 값을 50%로 설정하고 적절한 width 값과 left값을 설정하…","fields":{"slug":"/JS/2020-07-24-Vanilla-JS-2day-review/"},"frontmatter":{"date":"July 24, 2020","title":"[JS] Vanilla JavaScript day 2: Clock","category":"JS","draft":false}}},{"node":{"excerpt":"day 1 Drum Kit day 1은 keydown 이벤트를 활용하여 특정 키를 눌렀을 때 드럼의 소리가 나오도록 만드는 과정을 해보았다. 키보드의 A,S,D,F,G,H,J,K,L을 눌렀을 때 서로 다른 audio가 동작한다. 먼저 각 키보드 입력의 keyCode와 동작시킬 사운드 파일의 이름을 배열로 만들어주었다. element로는 입력 키보드 자판을…","fields":{"slug":"/JS/2020-07-22-Vanilla-JS-1day-review/"},"frontmatter":{"date":"July 22, 2020","title":"[JS] Vanilla JavaScript day 1: Drum Kit","category":"JS","draft":false}}},{"node":{"excerpt":"TCP (Transmission Control Protocol): 안정적, 순서보장, 에러탐지 가능 연결은 3 way-handshake 연결 종료는 4 way-handshake를 이용하기 때문에 매연결 마다 시간 비용이 발생함  UDP (User Datagram Protocol): 안정성, 순서, 에러탐지가 보장되지 않지만 지연시간이 짧다. IP (Int…","fields":{"slug":"/Network/2020-07-20-TCP-IP/"},"frontmatter":{"date":"July 20, 2020","title":"[Network] TCP / IP, UDP","category":"Network","draft":false}}},{"node":{"excerpt":"우아한 Tech 세미나 후기 우아한 Tech 세미나를 듣고 알게된 정보와 느낀점을 정리해 보았다. 1부: FE개발자가 되기 위한 방법 코로나로 인해 비대면사회가되면서 웹 프론트엔드가 빠른 속도로 발전하고 있고, 기술적 요구사항이 다양해졌다. 이에 대응 하기 위해서는 , 이 중요하다. FE의 로드맵을 다 할 수는 없다. 주니어 개발자는 양보다는 질이 중요하…","fields":{"slug":"/development/2020-07-16-woowahan-Tech-Seminar/"},"frontmatter":{"date":"July 16, 2020","title":"[세미나 후기] 우아한 Tech 세미나","category":"Development","draft":false}}},{"node":{"excerpt":"문제링크 백준 1202보석 도둑 풀이과정 가방의 최대무게한도에 포함된 보석중 가장 비싼 보석을 훔쳐야한다. 무게한도가 낮은 가방에 포함될수 있는 보석집합은 무게한도가 높은 가방에 포함된다. 따라서 무게한도가 낮은 가방부터 보석을 담는방향으로 접근한다. 이를 위해 무게한도에 대하여 오름차순으로 보석정보와 가방정보를 정렬하고 우선순위 큐에 가격이 높은순으로 …","fields":{"slug":"/Algorithm/2020-05-28-BOJ1202/"},"frontmatter":{"date":"May 28, 2020","title":"백준 1202보석도둑","category":"Algorithm","draft":false}}},{"node":{"excerpt":"문제링크 백준 1080행렬 풀이과정 A행렬의 3x3부분행렬의 원소를 뒤집어, B행렬과 갖게만드는 최소횟수를 구해야한다. A행렬의 어느 기준점을 중심으로 뒤집을 것인지를 판단해야하는데, 0,0 에서 n-2,m-2로 나아가며 뒤집기 때문에 3x3 의 부분행렬 기준 0,0을 기준으로 뒤집었다. 최종적으로 뒤집기를 수행 하고 난 이후 A와 B가 같은지를 확인하여…","fields":{"slug":"/Algorithm/2020-05-25-BOJ1080/"},"frontmatter":{"date":"May 25, 2020","title":"백준 1080행렬","category":"Algorithm","draft":false}}},{"node":{"excerpt":"module: 재 사용 가능한 코드로 캡슐화하고 다른 코드에서 쉽게 사용할 수 있게한다. ES6이전의 ES5에서는 자바스크립트에서 공식적으로 정의된 module이 없다고 한다. 대신에 다음과 같은 foramt을 사용하엿다. Asynchronous Module Definition (AMD) CommonJS Universal Module Definition …","fields":{"slug":"/JS/2020-05-24-module loader vs module bundler/"},"frontmatter":{"date":"May 24, 2020","title":"[JS] Modules","category":"JS","draft":false}}},{"node":{"excerpt":"자바스크립트 동작 asyncronous single-thread Event loop image 블로그 링크 Call Stack Web API Message Queue 실행된 code는 CallStack에 push된다.\nCallStack에 쌓인 code가 실행될 때 WebAPI가 제공하는 DOM, ajax, setTimeout을 사용한다면 web Api는 …","fields":{"slug":"/JS/2020-05-28-event-loop/"},"frontmatter":{"date":"May 24, 2020","title":"[JS] Event loop","category":"JS","draft":false}}},{"node":{"excerpt":"IIFE : Immediately invoked Function Expressions 일반적인 함수의 정의(definition)는 다음과 같을 것이다. 자바스크립트 에서는 변수에 함수라는 value를 할당할 수 있다. 위의 예시는 function definition이 아닌 function expression 이다.\n자바스크립트에서 함수는 value를 갖으…","fields":{"slug":"/JS/2020-05-23-IIFE/"},"frontmatter":{"date":"May 23, 2020","title":"[JS] IIFE","category":"JS","draft":false}}},{"node":{"excerpt":"자바스크립트는 클래스 기반이 아닌 프로토타입 기반의 언어이다.\nES2015부터 class를 지원하였지만 class는 여전히 프로토타입 기반으로 동작한다. 위와 같이 person이라는 함수를 정의하면 자바스크립트에서는 자동으로 person이라는 객체 뿐만아니라, person의 prototype이라는 객체가 생성된다. person과 prototype은 서로 …","fields":{"slug":"/JS/2020-05-20-proto vs prototype/"},"frontmatter":{"date":"May 20, 2020","title":"[JS] __proto__ vs prototype","category":"JS","draft":false}}},{"node":{"excerpt":"Type Coercion 자바스크립트는 type coersion을통해, 형태가 다른 데이터의 연산을 처리한다. 연산에 따라 true 는 1 false는 0이 될수도, string이 될수도 있음을 확인할 수 있다. 따라서 type coersion을 방지하기위해 항상 ===과 !==을 사용하는 습관을 갖는것이 좋다. Typeof Typeof를 통해 primi…","fields":{"slug":"/JS/2020-05-19-Type Coercion, typeof and instanceof/"},"frontmatter":{"date":"May 19, 2020","title":"[JS] Type Coercion, typeof and instanceof","category":"JS","draft":false}}},{"node":{"excerpt":"왜 10은 서로 같지 않을까?\n이를 알기 위해서는 value와 reference의 차이를 알아야한다. value value는 말그대로 변수가 갖는 데이터를 말한다.\nb = a 에서 b의 value는 a의 value와 갖게된다.\n하지만 b의 value를 바꾸더라도 a의 value는 그대로 남아있음을 확인할 수 있다. reference array, objec…","fields":{"slug":"/JS/2020-05-19-Value  vs Reference/"},"frontmatter":{"date":"May 19, 2020","title":"[JS] Value vs Reference","category":"JS","draft":false}}},{"node":{"excerpt":"Primitive Type이란 object나 method가 아닌 data를 의미한다. 자바스크립트에서는 string, number, bigint, boolean, undefined, symbol이라는\n6가지 primitive data type들이 존재한다. undefined: 선언되었을때 자동적으로 갖게되는 value bigint: 253 -1 보다 큰 …","fields":{"slug":"/JS/2020-05-18-Primitive Types/"},"frontmatter":{"date":"May 18, 2020","title":"[JS] Primitive Types","category":"JS","draft":false}}},{"node":{"excerpt":"Call Stack 자바스크립트가 함수 실행을 다루는 방법 처리해야할 함수를 Stack에 쌓고 처리한 후 pop 에러가 발생했을 때, 에러메시지는 에러 발생 직전의 Call Stack을 보여줌 위의 코드와 같이 함수 4개를 정의하고 a()를 호출하게되면\nstack에 d c b a 순서로 쌓이는 것을 볼 수 있다. image 개발자 도구의 Sources 탭…","fields":{"slug":"/JS/2020-05-18-Call-Stack/"},"frontmatter":{"date":"May 18, 2020","title":"[JS] Call Stack","category":"JS","draft":false}}},{"node":{"excerpt":"문제링크 백준 14502연구소 풀이과정 미로를 따라 진행하여 1,1에서 N,M의 위치까지 도착하는 최단거리를 구하기 전형적인 dfs 문제이다. 각 칸에 해당 위치까지의 최소 거리 값을 저장하였다. 입력 값은 띄어쓰기가 없으므로, map을 사용하여 스트링을 배열로 바꾸고, 각각의 요소를 int로 형변환 해서 list에 저장한다. CODE 처음에는 큐를 사용…","fields":{"slug":"/Algorithm/2020-05-16-BOJ2178/"},"frontmatter":{"date":"May 16, 2020","title":"백준 2178미로탐색","category":"Algorithm","draft":false}}},{"node":{"excerpt":"BFS (Breadth First Search) 시작 노드와의 거리에 따른 탐색방법 구현 list를 이용할경우 pop연산에 있어서 O(n)의 시간이 필요하기 때문에\n(deque) double ended queue를 import하여 popleft를 사용하였다.\nset연산에서 ’-‘가 지원되어 방문했던 노드를 제거할 수 있고,\n최종적으로 방문한 순서대로 노드…","fields":{"slug":"/Algorithm/2020-05-14-BFS and DFS/"},"frontmatter":{"date":"May 14, 2020","title":"BFS와 DFS with python","category":"Algorithm","draft":false}}},{"node":{"excerpt":"문제링크 백준 14502연구소 풀이과정 바이러스를 막기위한 벽은 3개를 필수로 세워야한다. 바이러스는 상하좌우로 전이된다. 모든 경우에 대하여 빈 칸의 최대 갯수를 구하기 CODE 3개의 벽을 세울 때, 각각의 위치는 중복되서는 안되기 때문에 벽을 세울수 있는 경우의 수는 조합의 갯수와 같다. 내 풀이는 중복되는경우가 3!만큼 발생하기 때문에 시간이 6배…","fields":{"slug":"/Algorithm/2020-05-14-BOJ14502/"},"frontmatter":{"date":"May 14, 2020","title":"백준 14502연구소","category":"Algorithm","draft":false}}}]}},"pageContext":{}}}