{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"서지환의 블로그","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"데이터 베이스 정규화: 데이터의 중복을 줄이고, 데이터 무결성을 향상 시키기 위한 과정 데이터 무결성: 데이터의 정확성과 일관성을 유지 + 보증 개체 무결성: 모든 테이블이 pk를 가져야하며 pk는 고유해야 한다 + (not null).\n참조 무결성: 모든 외래 키 값(FK)은 특정 테이블의 기본 키 값(PK)을 참조\n범위 무결성: 각 열의 값은 정위된 …","fields":{"slug":"/CS/DB/Process vs Thread/"},"frontmatter":{"date":"October 18, 2020","title":"[CS] 데이터베이스 정규화","category":"CS","draft":false}}},{"node":{"excerpt":"프로세스: 실행 중인 프로그램 프로그램을 실행하면 프로세스는 프로그램에 기록된 작업을 수행한다.\n메모리 공간에 프로세스가 올라가게 되고 프로세스는 크게 4가지 섹션으로 나눌 수 있다. 프로세스의 4가지 섹션 스택: 메서드, 함수 매개변수, 반환 주소, local 변수 등 임시 데이터 포함 힙: 런타임에 프로세스에 동적으로 할당된 메모리 영역  텍스트: 프…","fields":{"slug":"/CS/OS/Process vs Thread/"},"frontmatter":{"date":"October 17, 2020","title":"[CS] Process vs Thread","category":"CS","draft":false}}},{"node":{"excerpt":"https://codesandbox.io/s/ordermonitor04-forked-4qmnb?file=/src/containers/MonitorController.tsx\n 저번시간에 이어서 container 컴포넌트를 살펴보자 MonitorController.tsx MonitorController는 React.PureComponent를 상속받는다.\nPu…","fields":{"slug":"/JS/woowahan_tech_learning/WTL-4-1/"},"frontmatter":{"date":"October 06, 2020","title":"[JS] 우아한 테크 러닝 4주차 - (1)","category":"JS","draft":false}}},{"node":{"excerpt":"Redux와 미들웨어 비동기 작업은 store의 state를 업데이트하는 것이 불가능하다. reducer는 동기적으로 동작하기 때문이다. 위의 코드를 보면 fetch-user라는 action을 reducer에 전달해주면, api함수가 호출될 것이다.  비동기 콜백안에 있는 state값은 클로저로 접근할 수 있지만 현재의 상태가 아닌 과거의 상태가 될것이다…","fields":{"slug":"/JS/woowahan_tech_learning/WTL-3-1/"},"frontmatter":{"date":"September 21, 2020","title":"[JS] 우아한 테크 러닝 3주차 - (1)","category":"JS","draft":false}}},{"node":{"excerpt":"Redux Saga & TS Boilerplate Saga는 Redux의 미들웨어이다. https://codesandbox.io/s/ordermonitor04-n51jrkq2wl?file=/src/index.tsx\n위의 주소에 있는 소스를 분석해보자  컨테이너와 컴포넌트 구분 컨테이너와 컴포넌트 구분을 통해 불필요한 리 렌더링을 막고 유지보수를 용이하게 …","fields":{"slug":"/JS/woowahan_tech_learning/WTL-3-2/"},"frontmatter":{"date":"September 21, 2020","title":"[JS] 우아한 테크 러닝 3주차 - (2)","category":"JS","draft":false}}},{"node":{"excerpt":"함수형 컴포넌트와 클래스형 컴포넌트의 상태 관리 함수형 컴포넌트 setState를 이용해야 상태가 바뀜을 리액트가 감지한다.\n이를통해 re rendering이 일어난다. 클래스 컴포넌트는 상태를 가질 수 있다.\nconstructor에서 생성하고 그 상태는 유지된다. (업데이트 가능)  ui를 바꾸기 위해 함수형 컴포넌트에서 상태값을 사용하려면 hook을 …","fields":{"slug":"/JS/woowahan_tech_learning/WTL-2-2/"},"frontmatter":{"date":"September 10, 2020","title":"[JS] 우아한 테크 러닝 2주차 - (2)","category":"JS","draft":false}}},{"node":{"excerpt":"우아한 테크 코스 2주차 - 1 React 직접 구현하기 사용자에만 머무르지 말자 지식을 넓히자 real dom을 통해 ui를 조작하는 것은 안정성이 떨어진다 + low level React: dom을 좀 더 다루기 쉽게 하기 위해 만들어진 Concept HTML을 DOM Tree로 converting해서 조금 더 다루기 쉽게 하는 것과\nDOM을 VDOM…","fields":{"slug":"/JS/woowahan_tech_learning/WTL-2-1/"},"frontmatter":{"date":"September 08, 2020","title":"[JS] 우아한 테크 러닝 2주차 - (1)","category":"JS","draft":false}}},{"node":{"excerpt":"webpack https://webpack.js.org/concepts/ Core Concepts Entry: 웹팩이 사용할 시작점 : 웹팩 설정 파일 Output: 번들 파일이 만들어질 장소와 번들 파일의 이름 정하기  라이브러리는 Node.js module로 file path를 다룰 때 사용된다.\nhttps://nodejs.org/api/path.ht…","fields":{"slug":"/developer-roadmap/Web-Bundler/1_webpack-1/"},"frontmatter":{"date":"September 07, 2020","title":"[Web-Bundler] webpack","category":"developer-roadmap","draft":false}}},{"node":{"excerpt":"우아한 테크 코스 1주차 - 2 JS / Redux 자바스크립트 함수는 값을 반환하게 되어있음 함수는 값이다 return 없으면 undefined반환  new 연산자로 함수 호출 하면 명시적 return이 없어도 새로운 객체를 만들어낸다.   bar() 는 const bar을 가리키기 때문에 \n안에있는 function에 이름을 붙일 필요 없음 함수를 값으…","fields":{"slug":"/JS/woowahan_tech_learning/WTL-1-2/"},"frontmatter":{"date":"September 03, 2020","title":"[JS] 우아한 테크 러닝 1주차 - (2)","category":"JS","draft":false}}},{"node":{"excerpt":"웹 성능 최적화 - (1) 왜 성능 최적화를 할줄 알아야 하는가? 이용자가 떠나지 않도록 하기 위해 (웹 사용성) 프론트 엔드 개발자로서 경쟁력 웹 성능 결정 요소 로딩성능 렌더링성능 로딩 / 렌더링 브라우저가 화면을 어떻게 그리는지 이해해야한다. 로딩 성능 최적화 이미지 사이즈 최적화 Code Split 텍스트 압축 렌더링 성능 최적화 bottlenec…","fields":{"slug":"/Web-Performance/performance-1/"},"frontmatter":{"date":"September 03, 2020","title":"[Performance] 웹 성능 최적화 - (1)","category":"Web-Performance","draft":false}}},{"node":{"excerpt":"npm(Node Package Manager) 많은 개발자들이 패키지를 공유하고 관리하는 세계에서 가장 큰 소프트웨어 레지스트리 터미널 명령어 npm init: package.json 생성 npm search package이름: 패키지 검색 npm install package이름 || url || path || tag\n옵션 -P or —save-prod …","fields":{"slug":"/developer-roadmap/1_npm/"},"frontmatter":{"date":"August 29, 2020","title":"[FE] npm","category":"developer-roadmap","draft":false}}},{"node":{"excerpt":"LINE PLUS 채용 설명회    회사 업무 진행 웹 기술을 이용해 유저의 사용성 높이기 위한 연구\n개발 최적 기술 스택을 고민하고 선정\n타국 개발자와의 협업을 위해 회의에 통역사분들도 참가 Q1 프론트엔드 개발자에게 가장 중요하고 필수적인 역량은 무엇인가요? 유저와의 접점에 있기 때문에 DB, 서버, UI/UX 효율적으로 조율 해야함\n=> UI/UX …","fields":{"slug":"/development/2020-08-27-Line-Seminar/"},"frontmatter":{"date":"August 27, 2020","title":"[세미나 정리] Line Plus 세미나","category":"Development","draft":false}}},{"node":{"excerpt":"이번 day에서는 각 태그들에 대한 dropdown 효과를 구현해 보았다. image 이벤트리스너 mouseenter: 마우스가 a태그에 올라가면 해당 컨텐츠들의 opacity와 display값을 바꾸어 transition 효과를 보여준다. mouseleave: 위의 transition을 제거한다. mouseenter vs mouseover mouseen…","fields":{"slug":"/JS/JS30/2020-08-17-Vanilla-JS-26day-review/"},"frontmatter":{"date":"August 17, 2020","title":"[JS] Vanilla JavaScript day 26: Stripe Follow Along Dropdown","category":"JS","draft":false}}},{"node":{"excerpt":"자바스크립트 동작 asyncronous single-thread Event loop Call Stack 백그라운드 Task Queue  블로그 링크 MDN(https://developer.mozilla.org/ko/docs/Web/JavaScript/EventLoop) 설명 함수 호출은 스택을 형성한다. 호출된 함수는 종료된 후 스택에서 사라진다.\n비동기…","fields":{"slug":"/JS/2020-08-14-event-loop/"},"frontmatter":{"date":"August 14, 2020","title":"[JS] Event loop","category":"JS","draft":false}}},{"node":{"excerpt":"Call Stack 자바스크립트가 함수 실행을 다루는 방법 호출된 함수를 Stack에 쌓고 위에서부터 실행되고 종료된 후 사라진다. 에러가 발생했을 때, 에러메시지는 에러 발생 직전의 Call Stack을 보여줌 위의 코드와 같이 함수 4개를 정의하고 a()를 호출하게되면\nstack에 d c b a 순서로 쌓이는 것을 볼 수 있다.  개발자 도구의 Sou…","fields":{"slug":"/JS/2020-08-13-Call-Stack/"},"frontmatter":{"date":"August 13, 2020","title":"[JS] Call Stack","category":"JS","draft":false}}},{"node":{"excerpt":"day 17: Sort Without Articles 다음 band들을 Article을 제외한 String으로 정렬해보자 The, A, An으로 시작되는 문자를 제외하고 나머지의 문자로 정렬을 해야한다.\n하지만 는 A로 시작하지만 제외해서는 안된다.\n따라서 각 Article 뒤에 공란을 포함한 상태로 문자열을 체크해야 한다. replace에 정규식을 이용…","fields":{"slug":"/JS/JS30/2020-08-09-Vanilla-JS-17day-review/"},"frontmatter":{"date":"August 09, 2020","title":"[JS] Vanilla JavaScript day 17: Sort Without Articles","category":"JS","draft":false}}},{"node":{"excerpt":"day 16: Text Shadow Mouse Move Effect day 16에서는 마우스 위치를 이용하여 h1태그의 textShadow값을 변화 시켜 보았다. h1을 포함하는 div에 mousemove 이벤트 리스너를 추가하고 발생하는 event의 offsetX, offsetY 값을 이용하였다. 마우스 커서가 h1을 포함하는 div에 있을때와 h1에 …","fields":{"slug":"/JS/JS30/2020-08-09-Vanilla-JS-16day-review/"},"frontmatter":{"date":"August 09, 2020","title":"[JS] Vanilla JavaScript day 16: Text Shadow Mouse Move Effect","category":"JS","draft":false}}},{"node":{"excerpt":"day 15: LocalStorage day 15에서는 localStorage를 이용해서 데이터를 저장하고\n화면에 리스트로 보여주었다. localStorage: HTML5에 추가된 저장소로 데이터가 영구적으로 브라우저에 저장된다. 반대로 sessionStorage는 브라우저를 종료하면 데이터가 사라진다.\n따라서 데이터를 localStorage에 저장하여 …","fields":{"slug":"/JS/JS30/2020-08-08-Vanilla-JS-15day-review/"},"frontmatter":{"date":"August 08, 2020","title":"[JS] Vanilla JavaScript day 15: LocalStorage","category":"JS","draft":false}}},{"node":{"excerpt":"day 13: Slide in on Scroll day 13에서는 scroll을 감지하여 스크롤의 위치에 따라 이미지가 나타났다 사라지는 효과를 만들어보았다. image 이때 조금만 스크롤을 내려도 많은 이벤트가 발생하기 때문에 성능 상의 문제가 발생할 수 있다. debounce: 연속적으로 이벤트가 발생할때 매 순간 함수를 호출하지 않고 이벤트가 끝났을…","fields":{"slug":"/JS/JS30/2020-08-06-Vanilla-JS-13day-review/"},"frontmatter":{"date":"August 06, 2020","title":"[JS] Vanilla JavaScript day 13: Slide in on Scroll","category":"JS","draft":false}}},{"node":{"excerpt":"day 11: Custom Video Player day 11에서는 Video Player를 꾸며보았다. image 비디오의 시간에 따라 변화하는 progressbar 일시중지와 재생을 toggle 할 수 있는 버튼 볼륨 input Skip 버튼 전체 컨트롤 기능들은 css의 transform을 이용하여 hover상태일 때에만 노출된다. progressb…","fields":{"slug":"/JS/JS30/2020-08-05-Vanilla-JS-11day-review/"},"frontmatter":{"date":"August 06, 2020","title":"[JS] Vanilla JavaScript day 11: Custom Video Player","category":"JS","draft":false}}},{"node":{"excerpt":"day 10: Hold Shift to Check Multiple Checkboxes day 10에서는 리스트들을 한번에 체크할 수 있는 함수를 만들어 보았다. 결과 화면\nimage 시프트 키를 누른상태에서 2번째 리스트를 클릭하게되면 해당 범위의 리스트들이 모두 체크되는 것을 보여준다. 이를 위해서 클릭된 1번째 2번째의 리스트 정보를 저장하고 시프트 …","fields":{"slug":"/JS/JS30/2020-08-05-Vanilla-JS-10day-review/"},"frontmatter":{"date":"August 05, 2020","title":"[JS] Vanilla JavaScript day 10: Hold Shift to Check Multiple Checkboxes","category":"JS","draft":false}}},{"node":{"excerpt":"Async function: 비동기 함수를 처리하기 위한 함수로, Promise를 사용하여 결과를 반환한다. MDN MDN의 예시를 통해 이해해보자 Description async 함수에는 await식이 포함될 수 있다. await는 async 함수의 실행을 일시 중지하고 전달 된 Promise의 해결을 기다린 다음 async 함수의 실행을 다시 시작하고…","fields":{"slug":"/JS/2020-08-04-Async-function/"},"frontmatter":{"date":"August 04, 2020","title":"[JS] Async-function","category":"JS","draft":false}}},{"node":{"excerpt":"day 8: HTML 5 Canvas day 8에서는 canvas를 이용하여 화면에 그림을 그려보았다. MDN: Canvas\ncanvas element에 접근하여 getContext()를 실행하면 렌더링할 수 있는 method에 접근할 수 있다. 위에서 2d옵션을 이용하면 CanvasRenderingContext2D 인터페이스를 사용할 수 있다.\nMDN:…","fields":{"slug":"/JS/JS30/2020-07-31-Vanilla-JS-8day-review/"},"frontmatter":{"date":"July 31, 2020","title":"[JS] Vanilla JavaScript day 8: HTML 5 Canvas","category":"JS","draft":false}}},{"node":{"excerpt":"day 7: Array Cardio Day 2 day 7에서는 Array의 method인 some, every, find, findIndex를 사용해 보았다. 주어진 데이터는 다음과 같다. 1. some()을 통해 19살 이상인 사람이 있는지 찾기 some()은 배열의 요소중 하나라도 조건을 만족한다면(true를 반환한다면)\n최종 값이 true가 되고 이…","fields":{"slug":"/JS/JS30/2020-07-30-Vanilla-JS-7day-review/"},"frontmatter":{"date":"July 30, 2020","title":"[JS] Vanilla JavaScript day 7: Array Cardio Day 2","category":"JS","draft":false}}},{"node":{"excerpt":"day 6: Ajax Type Ahead day 6에서는 api를 통해 도시들의 정보들을 가져오고 검색을 통해 원하는 도시를 검색해 보았다. 위의 url을 통해 data를 전달 받을 수 있다.\nfetch는 비동기 처리를 돕기 위해, promise를 return한다. 스트림을 모두 전달받고 JSON으로 바꾼다. 최종적으로 cities가 참조하는 배열에 데이…","fields":{"slug":"/JS/JS30/2020-07-30-Vanilla-JS-6day-review/"},"frontmatter":{"date":"July 30, 2020","title":"[JS] Vanilla JavaScript day 6: Ajax Type Ahead","category":"JS","draft":false}}},{"node":{"excerpt":"Promise: 비동기 응답을 동기적으로 처리 하기 위한 약속 fetch는 자바스크립트에서 서버에 request를 보내고 새로운 정보를 받아올 때 사용된다. fetch는 Promise를 반환한다. AJAX의 필요성 최악의 상황으로 request를 보내고 서버로 부터 body를 받기 까지 1시간이 걸렸다고 생각해보자. 만약 동기적으로 모든 코드가 진행된다면…","fields":{"slug":"/JS/2020-07-29-Promise/"},"frontmatter":{"date":"July 29, 2020","title":"[JS] Promise","category":"JS","draft":false}}},{"node":{"excerpt":"day 5: Flex Panels Image Gallery CSS의 Flexbox layout을 이용하여 이미지 갤러리를 만들어 보았다. Flexbox  부모 요소에 display: flex, flex-direction을 row로 설정하면 하나의 행안에 여러 열의 box형태로 layout을 구성할 수 있다. 또한 flexbox 내부의 요소들은 길게 늘어나…","fields":{"slug":"/JS/JS30/2020-07-27-Vanilla-JS-5day-review/"},"frontmatter":{"date":"July 27, 2020","title":"[JS] Vanilla JavaScript day 5: Flex Panels Image Gallery","category":"JS","draft":false}}},{"node":{"excerpt":"day 4: Array Carido Day1 day 4에서는 Array의 method(filter, map, reduce, sort)들을 사용해 보았다. 주어진 data는 다음과 같다. 1. filter()를 이용해 15세기에 태어난 발명가들을 구하기  filter를 이용하여 각 element에 통과할 수 있는 조건을 arrow function으로 전달한…","fields":{"slug":"/JS/JS30/2020-07-26-Vanilla-JS-4day-review/"},"frontmatter":{"date":"July 26, 2020","title":"[JS] Vanilla JavaScript day 4: Array Carido Day1","category":"JS","draft":false}}},{"node":{"excerpt":"day 3: Update CSS Variables with JS day 3을 통해 CSS에 변수를 처음 사용해 보았다. 관련 링크\nw3schools :root에 —를 이용하여 global custom property를 정의하고, var()함수를 이용해 property를 사용할 수 있다. 해당 property를 JavaScript로 적절히 수정해보자 각각의…","fields":{"slug":"/JS/JS30/2020-07-25-Vanilla-JS-3day-review/"},"frontmatter":{"date":"July 25, 2020","title":"[JS] Vanilla JavaScript day 3: Update Css Variables with JS","category":"JS","draft":false}}},{"node":{"excerpt":"this: determined by how a function is called (runtime binding). JavaScript에서 this는 호출 방법에 따라 결정된다. Global context에서 this는 Global object이고 browser에서는 Global object가 object Window이다. 함수에서 this는 함수 호출 방…","fields":{"slug":"/JS/2020-07-25-this/"},"frontmatter":{"date":"July 25, 2020","title":"[JS] this","category":"JS","draft":false}}},{"node":{"excerpt":"day 2: Clock div로 원 표현하기위해 height와 width를 같게 지정하고 border-radius값을 50%로 설정한다.  시침,분침,초침의 position은 absolute로 설정한다.\n부모의 position을 relative로 설정하고, 시침,분침,초침의 top 값을 50%로 설정하고 적절한 width 값과 left값을 설정하면 모든 …","fields":{"slug":"/JS/JS30/2020-07-24-Vanilla-JS-2day-review/"},"frontmatter":{"date":"July 24, 2020","title":"[JS] Vanilla JavaScript day 2: Clock","category":"JS","draft":false}}},{"node":{"excerpt":"day 1 Drum Kit day 1은 keydown 이벤트를 활용하여 특정 키를 눌렀을 때 드럼의 소리가 나오도록 만드는 과정을 해보았다. 키보드의 A,S,D,F,G,H,J,K,L을 눌렀을 때 서로 다른 audio가 동작한다. 먼저 각 키보드 입력의 keyCode와 동작시킬 사운드 파일의 이름을 배열로 만들어주었다. element로는 입력 키보드 자판을…","fields":{"slug":"/JS/JS30/2020-07-22-Vanilla-JS-1day-review/"},"frontmatter":{"date":"July 22, 2020","title":"[JS] Vanilla JavaScript day 1: Drum Kit","category":"JS","draft":false}}},{"node":{"excerpt":"TCP (Transmission Control Protocol): 안정적, 순서보장, 에러탐지 가능 연결은 3 way-handshake 연결 종료는 4 way-handshake를 이용하기 때문에 매연결 마다 시간 비용이 발생함  UDP (User Datagram Protocol): 안정성, 순서, 에러탐지가 보장되지 않지만 지연시간이 짧다. IP (Int…","fields":{"slug":"/CS/Network/2020-07-20-TCP-IP/"},"frontmatter":{"date":"July 20, 2020","title":"[Network] TCP / IP, UDP","category":"CS","draft":false}}},{"node":{"excerpt":"우아한 Tech 세미나 후기 우아한 Tech 세미나를 듣고 알게된 정보와 느낀점을 정리해 보았다. 1부: FE개발자가 되기 위한 방법 코로나로 인해 비대면사회가되면서 웹 프론트엔드가 빠른 속도로 발전하고 있고, 기술적 요구사항이 다양해졌다. 이에 대응 하기 위해서는 , 이 중요하다. FE의 로드맵을 다 할 수는 없다. 주니어 개발자는 양보다는 질이 중요하…","fields":{"slug":"/development/2020-07-16-woowahan-Tech-Seminar/"},"frontmatter":{"date":"July 16, 2020","title":"[세미나 후기] 우아한 Tech 세미나","category":"Development","draft":false}}},{"node":{"excerpt":"문제링크 백준 1202보석 도둑 풀이과정 가방의 최대무게한도에 포함된 보석중 가장 비싼 보석을 훔쳐야한다. 무게한도가 낮은 가방에 포함될수 있는 보석집합은 무게한도가 높은 가방에 포함된다. 따라서 무게한도가 낮은 가방부터 보석을 담는방향으로 접근한다. 이를 위해 무게한도에 대하여 오름차순으로 보석정보와 가방정보를 정렬하고 우선순위 큐에 가격이 높은순으로 …","fields":{"slug":"/Algorithm/2020-05-28-BOJ1202/"},"frontmatter":{"date":"May 28, 2020","title":"백준 1202보석도둑","category":"Algorithm","draft":false}}},{"node":{"excerpt":"문제링크 백준 1080행렬 풀이과정 A행렬의 3x3부분행렬의 원소를 뒤집어, B행렬과 갖게만드는 최소횟수를 구해야한다. A행렬의 어느 기준점을 중심으로 뒤집을 것인지를 판단해야하는데, 0,0 에서 n-2,m-2로 나아가며 뒤집기 때문에 3x3 의 부분행렬 기준 0,0을 기준으로 뒤집었다. 최종적으로 뒤집기를 수행 하고 난 이후 A와 B가 같은지를 확인하여…","fields":{"slug":"/Algorithm/2020-05-25-BOJ1080/"},"frontmatter":{"date":"May 25, 2020","title":"백준 1080행렬","category":"Algorithm","draft":false}}},{"node":{"excerpt":"module: 재 사용 가능한 코드로 캡슐화하고 다른 코드에서 쉽게 사용할 수 있게한다. ES6이전의 ES5에서는 자바스크립트에서 공식적으로 정의된 module이 없다고 한다. 대신에 다음과 같은 foramt을 사용하엿다. Asynchronous Module Definition (AMD) CommonJS Universal Module Definition …","fields":{"slug":"/JS/2020-05-24-module loader vs module bundler/"},"frontmatter":{"date":"May 24, 2020","title":"[JS] Modules","category":"JS","draft":false}}},{"node":{"excerpt":"IIFE : Immediately invoked Function Expressions 일반적인 함수의 정의(definition)는 다음과 같을 것이다. 자바스크립트 에서는 변수에 함수라는 value를 할당할 수 있다. 위의 예시는 function definition이 아닌 function expression 이다.\n자바스크립트에서 함수는 value를 갖으…","fields":{"slug":"/JS/2020-05-23-IIFE/"},"frontmatter":{"date":"May 23, 2020","title":"[JS] IIFE","category":"JS","draft":false}}},{"node":{"excerpt":"자바스크립트는 클래스 기반이 아닌 프로토타입 기반의 언어이다.\nES2015부터 class를 지원하였지만 class는 여전히 프로토타입 기반으로 동작한다. 위와 같이 person이라는 함수를 정의하면 자바스크립트에서는 자동으로 person이라는 객체 뿐만아니라, person의 prototype이라는 객체가 생성된다. person과 prototype은 서로 …","fields":{"slug":"/JS/2020-05-20-proto vs prototype/"},"frontmatter":{"date":"May 20, 2020","title":"[JS] __proto__ vs prototype","category":"JS","draft":false}}},{"node":{"excerpt":"Type Coercion 자바스크립트는 type coersion을통해, 형태가 다른 데이터의 연산을 처리한다. 연산에 따라 true 는 1 false는 0이 될수도, string이 될수도 있음을 확인할 수 있다. 따라서 type coersion을 방지하기위해 항상 ===과 !==을 사용하는 습관을 갖는것이 좋다. Typeof Typeof를 통해 primi…","fields":{"slug":"/JS/2020-05-19-Type Coercion, typeof and instanceof/"},"frontmatter":{"date":"May 19, 2020","title":"[JS] Type Coercion, typeof and instanceof","category":"JS","draft":false}}},{"node":{"excerpt":"왜 10은 서로 같지 않을까?\n이를 알기 위해서는 value와 reference의 차이를 알아야한다. value value는 말그대로 변수가 갖는 데이터를 말한다.\nb = a 에서 b의 value는 a의 value와 갖게된다.\n하지만 b의 value를 바꾸더라도 a의 value는 그대로 남아있음을 확인할 수 있다. reference array, objec…","fields":{"slug":"/JS/2020-05-19-Value  vs Reference/"},"frontmatter":{"date":"May 19, 2020","title":"[JS] Value vs Reference","category":"JS","draft":false}}},{"node":{"excerpt":"Primitive Type이란 object나 method가 아닌 data를 의미한다. 자바스크립트에서는 string, number, bigint, boolean, undefined, symbol이라는\n6가지 primitive data type들이 존재한다.\n불변하여 변형할 수 없다는 특징이 있다. undefined: 선언되었을때 자동적으로 갖게되는 val…","fields":{"slug":"/JS/2020-05-18-Primitive Types/"},"frontmatter":{"date":"May 18, 2020","title":"[JS] Primitive Types","category":"JS","draft":false}}},{"node":{"excerpt":"문제링크 백준 14502연구소 풀이과정 미로를 따라 진행하여 1,1에서 N,M의 위치까지 도착하는 최단거리를 구하기 전형적인 dfs 문제이다. 각 칸에 해당 위치까지의 최소 거리 값을 저장하였다. 입력 값은 띄어쓰기가 없으므로, map을 사용하여 스트링을 배열로 바꾸고, 각각의 요소를 int로 형변환 해서 list에 저장한다. CODE 처음에는 큐를 사용…","fields":{"slug":"/Algorithm/2020-05-16-BOJ2178/"},"frontmatter":{"date":"May 16, 2020","title":"백준 2178미로탐색","category":"Algorithm","draft":false}}},{"node":{"excerpt":"문제링크 백준 14502연구소 풀이과정 바이러스를 막기위한 벽은 3개를 필수로 세워야한다. 바이러스는 상하좌우로 전이된다. 모든 경우에 대하여 빈 칸의 최대 갯수를 구하기 CODE 3개의 벽을 세울 때, 각각의 위치는 중복되서는 안되기 때문에 벽을 세울수 있는 경우의 수는 조합의 갯수와 같다. 내 풀이는 중복되는경우가 3!만큼 발생하기 때문에 시간이 6배…","fields":{"slug":"/Algorithm/2020-05-14-BOJ14502/"},"frontmatter":{"date":"May 14, 2020","title":"백준 14502연구소","category":"Algorithm","draft":false}}},{"node":{"excerpt":"BFS (Breadth First Search) 시작 노드와의 거리에 따른 탐색방법 구현 list를 이용할경우 pop연산에 있어서 O(n)의 시간이 필요하기 때문에\n(deque) double ended queue를 import하여 popleft를 사용하였다.\nset연산에서 ’-‘가 지원되어 방문했던 노드를 제거할 수 있고,\n최종적으로 방문한 순서대로 노드…","fields":{"slug":"/Algorithm/2020-05-14-BFS and DFS/"},"frontmatter":{"date":"May 14, 2020","title":"BFS와 DFS with python","category":"Algorithm","draft":false}}}]}},"pageContext":{}}}