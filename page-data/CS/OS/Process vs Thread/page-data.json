{"componentChunkName":"component---src-templates-blog-post-js","path":"/CS/OS/Process vs Thread/","result":{"data":{"site":{"siteMetadata":{"title":"서지환의 블로그","author":"[Ji hwan]","siteUrl":"https://seojihwan.github.io","comment":{"disqusShortName":"https-seojihwan-github-io","utterances":"seojihwan/seojihwan.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"77b4c928-ec48-56cb-80ce-b0e357b45e42","excerpt":"프로세스: 실행 중인 프로그램 프로그램을 실행하면 프로세스는 프로그램에 기록된 작업을 수행한다. 프로세스의 메모리 구조 스택: 데이터(메서드, 함수 매개변수, 반환 주소, local 변수 등 임시 데이터)를 일시적으로 저장, 함수를 호출할수록 커지고 반환하면 줄어든다. 힙: 런타임에 프로세스에 동적으로 할당된 메모리 영역  데이터: 가상 주소 공간 global, static…","html":"<h3 id=\"프로세스-실행-중인-프로그램\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%8B%A4%ED%96%89-%EC%A4%91%EC%9D%B8-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8\" aria-label=\"프로세스 실행 중인 프로그램 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스: 실행 중인 프로그램</h3>\n<p>프로그램을 실행하면 프로세스는 프로그램에 기록된 작업을 수행한다.</p>\n<p>프로세스의 메모리 구조</p>\n<ul>\n<li>스택: 데이터(메서드, 함수 매개변수, 반환 주소, local 변수 등 임시 데이터)를 일시적으로 저장, 함수를 호출할수록 커지고 반환하면 줄어든다.</li>\n<li>힙: 런타임에 프로세스에 동적으로 할당된 메모리 영역 </li>\n<li>데이터: 가상 주소 공간 global, static 변수 저장, 프로그램 실행 후 변수 초기화 </li>\n<li>코드: 컴파일된 프로그램이 저장되고, 읽기 전용, 공유 가능한 영역이다.</li>\n</ul>\n<p>스택에서는 local 변수, 데이터섹션 에서는 global, static 변수를 포함한다고하는데 이 차이를 알아보자</p>\n<h5 id=\"local-변수-global-static-변수-차이\" style=\"position:relative;\"><a href=\"#local-%EB%B3%80%EC%88%98-global-static-%EB%B3%80%EC%88%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"local 변수 global static 변수 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>local 변수, global, static 변수 차이</h5>\n<p>2가지 관점에서 3가지 변수의 차이를 구별할 수 있다.</p>\n<ul>\n<li>scope: 접근 가능한 영역</li>\n<li>stoarge duration: 변수가 만들어지고 사라지는 시점</li>\n</ul>\n<h6 id=\"local-변수\" style=\"position:relative;\"><a href=\"#local-%EB%B3%80%EC%88%98\" aria-label=\"local 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>local 변수</h6>\n<p>같은 블록 또는 하위 scope에서 접근 가능, 코드의 실행영역이 해당 scope를 벗어나면 local 변수는 사라진다.</p>\n<h6 id=\"global-변수\" style=\"position:relative;\"><a href=\"#global-%EB%B3%80%EC%88%98\" aria-label=\"global 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>global 변수</h6>\n<p>최 상단 scope에서 정의 되었기 때문에 모든 scope에서 접근 가능하다. scope가 최 상단이기 때문에 프로그램이 끝날때 까지 사라지지 않는다.</p>\n<h6 id=\"static-변수\" style=\"position:relative;\"><a href=\"#static-%EB%B3%80%EC%88%98\" aria-label=\"static 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>static 변수</h6>\n<p>같은 블록 또는 하위 scope에서 접근가능, 프로그램이 끝날때 까지 사라지지 않는다.</p>\n<p><a href=\"https://stackoverflow.com/questions/13415321/difference-between-static-auto-global-and-local-variable-in-the-context-of-c-a\">local vs global vs static</a></p>\n<h3 id=\"프로세스의-상태\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%81%ED%83%9C\" aria-label=\"프로세스의 상태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스의 상태</h3>\n<ul>\n<li>준비</li>\n<li>실행</li>\n<li>대기</li>\n</ul>\n<h4 id=\"프로세스의-상태-변화\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%81%ED%83%9C-%EB%B3%80%ED%99%94\" aria-label=\"프로세스의 상태 변화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스의 상태 변화</h4>\n<ul>\n<li>생성 -> <code class=\"language-text\">준비</code></li>\n</ul>\n<p>운영체제가 프로세스를 생성하면 준비 큐에 들어가고, 준비 상태가 된다.</p>\n<ul>\n<li><code class=\"language-text\">준비</code> -> <code class=\"language-text\">실행</code></li>\n</ul>\n<p>준비 큐 맨 앞의 프로세스는 프로세서를 점유(dispatch)하여 실행 상태가 된다.\n프로세스가 프로세서를 독점하는 것을 방지하기 위해 인터럽트 클록을 사용한다.</p>\n<ul>\n<li><code class=\"language-text\">실행</code> -> <code class=\"language-text\">준비</code></li>\n</ul>\n<p>프로세스에 할당된 시간이 지나면 인터럽트 클록이 인터럽트를 발생시켜 해당 프로세스를 준비 상태로 바꾼다.</p>\n<ul>\n<li><code class=\"language-text\">실행</code> -> <code class=\"language-text\">대기</code></li>\n</ul>\n<p>실행 상태의 프로세스에 입출력 연산, 자원 요청이 발생한 경우 해당 프로세스는 대기 상태가 된다.</p>\n<ul>\n<li><code class=\"language-text\">대기</code> -> <code class=\"language-text\">준비</code></li>\n</ul>\n<p>입 출력 연산이 끝나면 대기 상태(wake up)에서 준비상태로 돌아간다.</p>\n<ul>\n<li><code class=\"language-text\">실행</code> -> 종료</li>\n</ul>\n<p>작업이 끝난 프로세스는 메모리 공간을 반환하고 삭제된다.</p>\n<p>각 프로세스의 상태 정보는 프로세스 제어 블록에 저장된다.</p>\n<h4 id=\"프로세스-제어블록pcb\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4%EB%B8%94%EB%A1%9Dpcb\" aria-label=\"프로세스 제어블록pcb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 제어블록(PCB)</h4>\n<p>운영체제는 스케줄러를 통해 프로세스를 관리 제어하고 이때 각 프로세스에 있는 제어블록을 이용한다.</p>\n<p>프로세스 제어 블록은 프로세스와 함께 생성되고 프로세스가 종료될 때 같이 삭제된다.\n프로세스 제어 블록에는 다음과 같은 정보가 저장된다.</p>\n<ul>\n<li>프로세스 식별자: 각 프로세스의 고유 식별자</li>\n<li>프로세스 상태: 프로세스의 상태(생성, 준비, 실행, 대기, 중단)</li>\n<li>프로그램 카운터: 프로세스를 실행하는 다음 명령의 주소</li>\n<li>레지스터 저장 영역: 인터럽트가 발생하고 재실행 될때 프로그램 카운터와 함께 원래의 작업을 유지할 수 있도록 도움</li>\n<li>프로세서 스케줄링 정보: 프로세스 우선순위, 스케줄링 큐 포인터, 기타 매개변수</li>\n<li>계정 정보: 프로세스 사용 시간, 실 사용시간, 상한 시간, 프로세스 번호 등</li>\n<li>입출력 상태 정보, 메모리 관리 정보: 할당된 입출력장치, 상 하한 레지스터, 페이지 테이블, 세그먼트 테이블 값 등</li>\n</ul>\n<h4 id=\"프로세스-문맥-교환\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%AC%B8%EB%A7%A5-%EA%B5%90%ED%99%98\" aria-label=\"프로세스 문맥 교환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 문맥 교환</h4>\n<p>프로세스A에 인터럽트가 발생하면 A의 상태를 PCB(A)에 저장하고, PCB(B)의 정보를 통해 프로세스 B를 진행한다.</p>\n<h6 id=\"레지스터\" style=\"position:relative;\"><a href=\"#%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0\" aria-label=\"레지스터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>레지스터</h6>\n<p>레지스터는 메모리 계층의 최상위에 위치하며, 가장 빠른 속도로 접근 가능한 메모리이다. </p>\n<p>대부분의 현대 프로세서는 메인 메모리에서 레지스터로 데이터를 옮겨와 데이터를 처리한 후 그 내용을 다시 레지스터에서 메인 메모리로 저장하는 로드-스토어 설계를 사용한다.</p>\n<h3 id=\"스레드-프로세스의-실행-단위\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%8B%A4%ED%96%89-%EB%8B%A8%EC%9C%84\" aria-label=\"스레드 프로세스의 실행 단위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드: 프로세스의 실행 단위</h3>\n<p>스레드는 하나의 프로세스 내에서 자원을 공유한다.</p>\n<p>프로세스 내의 코드, 전역 데이터, 힙을 다른 스레드와 공유한다.\n프로그램 카운터, 스택 포인터, 문맥 정보, 지역 데이터, 스택은 스레드마다 독립적으로 갖는다.</p>\n<p>또한 멀티 스레딩을 통해 독립적인 작업 수행으로 수행능력을 향상시킬 수 있다.</p>\n<p>프로세스는 자원과 제어가 독립적이지만 스레드는 자원(코드, 전역 데이터, 힙)을 공유하고 제어만 독립적이다.\n프로세스 내의 스레드들은 프로세서의 자원을 공유하고, 같은 주소 공간에 있으며, 동일 한 데이터에 접근한다.\n이러한 특성 때문에 프로세스보다 스레드의 생성, 교환, 종료가 훨씬 빠르다.\n따라서 프로세스의 문맥 교환보다 스레드의 문맥 교환을 이용하는 것이 효율적이다.</p>\n<h6 id=\"출처-그림으로-배우는-구조와-원리-운영체제---구현회\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98-%EA%B7%B8%EB%A6%BC%EC%9C%BC%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%9B%90%EB%A6%AC-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C---%EA%B5%AC%ED%98%84%ED%9A%8C\" aria-label=\"출처 그림으로 배우는 구조와 원리 운영체제   구현회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처: 그림으로 배우는 구조와 원리 운영체제 - 구현회</h6>","frontmatter":{"title":"[CS] Process vs Thread","date":"October 17, 2020"}}},"pageContext":{"slug":"/CS/OS/Process vs Thread/","previous":{"fields":{"slug":"/JS/woowahan_tech_learning/WTL-4-1/"},"frontmatter":{"title":"[JS] 우아한 테크 러닝 4주차 - (1)","category":"JS","draft":false}},"next":{"fields":{"slug":"/CS/DB/normalization/"},"frontmatter":{"title":"[CS] 데이터베이스 정규화","category":"CS","draft":false}}}}}