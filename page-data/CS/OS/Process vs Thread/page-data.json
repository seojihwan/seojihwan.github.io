{"componentChunkName":"component---src-templates-blog-post-js","path":"/CS/OS/Process vs Thread/","result":{"data":{"site":{"siteMetadata":{"title":"서지환의 블로그","author":"[Ji hwan]","siteUrl":"https://seojihwan.github.io","comment":{"disqusShortName":"https-seojihwan-github-io","utterances":"seojihwan/seojihwan.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"29ba79c1-0b6c-5727-8882-33d87e58e4f5","excerpt":"프로세스: 실행 중인 프로그램 프로그램을 실행하면 프로세스는 프로그램에 기록된 작업을 수행한다.\n메모리 공간에 프로세스가 올라가게 되고 프로세스는 크게 4가지 섹션으로 나눌 수 있다. 프로세스의 4가지 섹션 스택: 메서드, 함수 매개변수, 반환 주소, local 변수 등 임시 데이터 포함 힙: 런타임에 프로세스에 동적으로 할당된 메모리 영역  텍스트: 프로그램 카운터(현재 활동)와 프로세서 레지스터의 내용 포함 데이터: global, static 변수 포함  스택에서는 local…","html":"<h3 id=\"프로세스-실행-중인-프로그램\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%8B%A4%ED%96%89-%EC%A4%91%EC%9D%B8-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8\" aria-label=\"프로세스 실행 중인 프로그램 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스: 실행 중인 프로그램</h3>\n<p>프로그램을 실행하면 프로세스는 프로그램에 기록된 작업을 수행한다.\n메모리 공간에 프로세스가 올라가게 되고 프로세스는 크게 4가지 섹션으로 나눌 수 있다.</p>\n<p>프로세스의 4가지 섹션</p>\n<ul>\n<li>스택: 메서드, 함수 매개변수, 반환 주소, local 변수 등 임시 데이터 포함</li>\n<li>힙: 런타임에 프로세스에 동적으로 할당된 메모리 영역 </li>\n<li>텍스트: 프로그램 카운터(현재 활동)와 프로세서 레지스터의 내용 포함</li>\n<li>데이터: global, static 변수 포함 </li>\n</ul>\n<p>스택에서는 local 변수, 데이터섹션 에서는 global, static 변수를 포함한다고하는데 이 차이를 알아보자</p>\n<h5 id=\"local-변수-global-static-변수-차이\" style=\"position:relative;\"><a href=\"#local-%EB%B3%80%EC%88%98-global-static-%EB%B3%80%EC%88%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"local 변수 global static 변수 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>local 변수, global ,static 변수 차이</h5>\n<p>2가지 관점에서 3가지 변수의 차이를 알아보자.</p>\n<ul>\n<li>scope: 접근 가능한 영역</li>\n<li>stoarge duration: 변수가 만들어지고 사라지는 시점</li>\n</ul>\n<h6 id=\"local-변수\" style=\"position:relative;\"><a href=\"#local-%EB%B3%80%EC%88%98\" aria-label=\"local 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>local 변수</h6>\n<p>같은 블록 또는 하위 scope에서 접근 가능, 코드의 실행영역이 해당 scope를 벗어나면 local 변수는 사라진다.</p>\n<h6 id=\"global-변수\" style=\"position:relative;\"><a href=\"#global-%EB%B3%80%EC%88%98\" aria-label=\"global 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>global 변수</h6>\n<p>최 상단 scope에서 정의 되었기 때문에 모든 scope에서 접근 가능하다. scope가 최 상단이기 때문에 프로그램이 끝날때 까지 사라지지 않는다.</p>\n<h6 id=\"static-변수\" style=\"position:relative;\"><a href=\"#static-%EB%B3%80%EC%88%98\" aria-label=\"static 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>static 변수</h6>\n<p>같은 블록 또는 하위 scope에서 접근가능, 프로그램이 끝날때 까지 사라지지 않는다.</p>\n<p><a href=\"https://stackoverflow.com/questions/13415321/difference-between-static-auto-global-and-local-variable-in-the-context-of-c-a\">local vs global vs static</a></p>\n<h6 id=\"레지스터\" style=\"position:relative;\"><a href=\"#%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0\" aria-label=\"레지스터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>레지스터</h6>\n<p>레지스터는 메모리 계층의 최상위에 위치하며, 가장 빠른 속도로 접근 가능한 메모리이다. </p>\n<p>대부분의 현대 프로세서는 메인 메모리에서 레지스터로 데이터를 옮겨와 데이터를 처리한 후 그 내용을 다시 레지스터에서 메인 메모리로 저장하는 로드-스토어 설계를 사용한다.</p>\n<h6 id=\"프로그램-카운터\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%B9%B4%EC%9A%B4%ED%84%B0\" aria-label=\"프로그램 카운터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그램 카운터</h6>\n<p>프로그램 카운터는 CPU 내부에 있는 레지스터 중의 하나로서, 다음에 실행될 명령어의 주소를 가지고 있어 실행할 기계어 코드의 위치를 지정한다. </p>\n<h3 id=\"프로세스-제어-블록pcb-프로세스들을-관리하는-운영체제의-데이터-구조\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4-%EB%B8%94%EB%A1%9Dpcb-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EB%93%A4%EC%9D%84-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0\" aria-label=\"프로세스 제어 블록pcb 프로세스들을 관리하는 운영체제의 데이터 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 제어 블록(PCB): 프로세스들을 관리하는 운영체제의 데이터 구조</h3>\n<p>프로세스의 상태, 권한, ID, CPU 레지스터, 스케줄링 정보 등등의 정보를 저장하고 프로세스 전환에 사용된다.</p>\n<p><a href=\"http://tutorialspoint.com/operating_system/os_processes.htm#:~:text=Advertisements-,Process,be%20implemented%20in%20the%20system.\">tutorialspoint 프로세스</a></p>\n<h3 id=\"스레드-프로세스의-실행-단위\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%8B%A4%ED%96%89-%EB%8B%A8%EC%9C%84\" aria-label=\"스레드 프로세스의 실행 단위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드: 프로세스의 실행 단위</h3>\n<p>스레드는 하나의 프로세스 내에서 자원을 공유한다.\n다음에 실행할 명령어를 갖는 프로그램 카운터, 현재 작업 변수를 보유하는 시스템 레지스터 , 실행 내역을 포함하는 스택으로 구성되어 있다.</p>\n<p>또한 멀티 스레딩을 통해 독립적인 작업 수행으로 수행능력을 향상시킬 수 있다.</p>\n<p><a href=\"https://www.tutorialspoint.com/operating_system/os_multi_threading.htm#:~:text=A%20thread%20is%20a%20flow,which%20contains%20the%20execution%20history.&#x26;text=Each%20thread%20represents%20a%20separate%20flow%20of%20control.\">tutorialspoint 스레드</a></p>","frontmatter":{"title":"[CS] Process vs Thread","date":"October 17, 2020"}}},"pageContext":{"slug":"/CS/OS/Process vs Thread/","previous":{"fields":{"slug":"/JS/woowahan_tech_learning/WTL-4-1/"},"frontmatter":{"title":"[JS] 우아한 테크 러닝 4주차 - (1)","category":"JS","draft":false}},"next":null}}}