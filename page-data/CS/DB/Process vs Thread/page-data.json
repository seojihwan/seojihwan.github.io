{"componentChunkName":"component---src-templates-blog-post-js","path":"/CS/DB/Process vs Thread/","result":{"data":{"site":{"siteMetadata":{"title":"서지환의 블로그","author":"[Ji hwan]","siteUrl":"https://seojihwan.github.io","comment":{"disqusShortName":"https-seojihwan-github-io","utterances":"seojihwan/seojihwan.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"5e891694-0352-5ff5-9a86-f3cfff9a82ac","excerpt":"https://en.wikipedia.org/wiki/Database_normalization 데이터 베이스 정규화: 데이터의 중복을 줄이고, 데이터 무결성 향상 시키기 위한 과정 데이터 무결성: 데이터의 정확성과 일관성을 유지 + 보증\n개체 무결성: 모든 테이블이 pk를 가져야하며 pk는 고유해야 한다 + (not null).\n참조 무결성: 모든 외래 키 값(FK)은 특정 테이블의 기본 키 값(PK)을 참조\n범위 무결성: 각 열의 값은 정위된 범위 또는 형식에 유효한 값을 가져야한다. 제…","html":"<p><a href=\"https://en.wikipedia.org/wiki/Database_normalization\">https://en.wikipedia.org/wiki/Database_normalization</a></p>\n<p>데이터 베이스 정규화: 데이터의 중복을 줄이고, 데이터 무결성 향상 시키기 위한 과정</p>\n<p>데이터 무결성: 데이터의 정확성과 일관성을 유지 + 보증\n개체 무결성: 모든 테이블이 pk를 가져야하며 pk는 고유해야 한다 + (not null).\n참조 무결성: 모든 외래 키 값(FK)은 특정 테이블의 기본 키 값(PK)을 참조\n범위 무결성: 각 열의 값은 정위된 범위 또는 형식에 유효한 값을 가져야한다.</p>\n<p>제1 정규화: 각각의 속성에는 값이 하나만 있어야 한다. (Atomic)\n제2 정규화: 기본키가 아닌 모든 속성 들이 기본키에 완전 함수적 종속이 되어야 한다.\n즉 기본키가 아닌 후보키에 의해 속성들이 결정되어서는 안된다.</p>\n<p>만약 기본키가 아닌 후보키에 의해 속성이 결정된다면, 해당 후보키를 기본키로 사용하고, 결정되는 속성을 따로 테이블로 분리하여 제2 정규화를 만족시킬 수 있다.\n(<a href=\"https://3months.tistory.com/193\">https://3months.tistory.com/193</a>)</p>\n<p>제 3정규화: 기본키를 제외한 속성에 의해 이행적 함수 종속이 없어야 한다.\nA->B,C에서 (A(기본키)가 B,C속성을 결정하는 상황에서)\n만약 B -> C라면 이행적 함수 종속이다.</p>\n<p>A->B 테이블과 B-> C 테이블로 분리하여 3정규화를 만족시킬 수 있다.</p>\n<p>BCNF: 모든 결정자가 후보키여야 한다.</p>\n<p>A,B -> C 이고\nC -> B인경우, C가 후보키가 아니라면\nA -> C, C -> B로 테이블을 나누어 BCNF 정규화를 만족시킬 수 있다.</p>","frontmatter":{"title":"[CS] 데이터베이스 정규화","date":"October 18, 2020"}}},"pageContext":{"slug":"/CS/DB/Process vs Thread/","previous":{"fields":{"slug":"/CS/OS/Process vs Thread/"},"frontmatter":{"title":"[CS] Process vs Thread","category":"CS","draft":false}},"next":null}}}