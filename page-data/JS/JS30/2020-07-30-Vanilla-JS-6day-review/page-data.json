{"componentChunkName":"component---src-templates-blog-post-js","path":"/JS/JS30/2020-07-30-Vanilla-JS-6day-review/","result":{"data":{"site":{"siteMetadata":{"title":"서지환의 블로그","author":"[Ji hwan]","siteUrl":"https://seojihwan.github.io","comment":{"disqusShortName":"https-seojihwan-github-io","utterances":"seojihwan/seojihwan.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"efb37d11-d9b7-5712-9559-7f4c9ee89f8b","excerpt":"day 6: Ajax Type Ahead day 6에서는 api를 통해 도시들의 정보들을 가져오고 검색을 통해 원하는 도시를 검색해 보았다. 위의 url을 통해 data를 전달 받을 수 있다.\nfetch는 비동기 처리를 돕기 위해, promise를 return한다. 스트림을 모두 전달받고 JSON으로 바꾼다. 최종적으로 cities가 참조하는 배열에 데이터를 추가한다.\npromise의 then을 이용해 위 작업은 동기적으로 수행된다. promise란 이제 추가된 정보를 form의 input…","html":"<h3 id=\"day-6-ajax-type-ahead\" style=\"position:relative;\"><a href=\"#day-6-ajax-type-ahead\" aria-label=\"day 6 ajax type ahead permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>day 6: Ajax Type Ahead</h3>\n<p>day 6에서는 api를 통해 도시들의 정보들을 가져오고 검색을 통해 원하는 도시를 검색해 보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> endpoint <span class=\"token operator\">=</span>\n  <span class=\"token string\">'https://gist.githubusercontent.com/Miserlou/c5cd8364bf9b2420bb29/raw/2bf258763cdddd704f8ffd3ea9a3e81d25e2c6f6/cities.json'</span></code></pre></div>\n<p>위의 url을 통해 data를 전달 받을 수 있다.\nfetch는 비동기 처리를 돕기 위해, promise를 return한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> cities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>endpoint<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">blob</span> <span class=\"token operator\">=></span> blob<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> cities<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>스트림을 모두 전달받고 JSON으로 바꾼다. 최종적으로 cities가 참조하는 배열에 데이터를 추가한다.\npromise의 then을 이용해 위 작업은 동기적으로 수행된다.</p>\n<p><a href=\"https://seojihwan.github.io/JS/2020-07-29-Promise/\">promise란</a></p>\n<p>이제 추가된 정보를 form의 input에서 검색할 수 있도록 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">findMatches</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">wordToMatch<span class=\"token punctuation\">,</span> cities</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> cities<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">place</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>wordToMatch<span class=\"token punctuation\">,</span> <span class=\"token string\">'gi'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> place<span class=\"token punctuation\">.</span>city<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> place<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">displayMatches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> matchArray <span class=\"token operator\">=</span> <span class=\"token function\">findMatches</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> cities<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> matchArray\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">place</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token string\">'gi'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> cityName <span class=\"token operator\">=</span> place<span class=\"token punctuation\">.</span>city<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>\n        regex<span class=\"token punctuation\">,</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;span class=\"hl\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/span></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> stateName <span class=\"token operator\">=</span> place<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>\n        regex<span class=\"token punctuation\">,</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;span class=\"hl\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/span></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      &lt;li>\n        &lt;span class=\"name\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cityName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>stateName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/span>\n        &lt;span class=\"population\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">numberWithCommas</span><span class=\"token punctuation\">(</span>place<span class=\"token punctuation\">.</span>population<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/span>\n      &lt;/li>\n    </span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  suggestions<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> html\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> searchInput <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.search'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> suggestions <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.suggestions'</span><span class=\"token punctuation\">)</span>\n\nsearchInput<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> displayMatches<span class=\"token punctuation\">)</span>\nsearchInput<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keyup'</span><span class=\"token punctuation\">,</span> displayMatches<span class=\"token punctuation\">)</span></code></pre></div>\n<p>input에 keyup과 change라는 이벤트 리스너를 추가하고, input의 value를 이용해\n정규표현식을 만들고 데이터를 replace하는 작업을 거친다.</p>\n<p>population 데이터의 3자리 수마다 콤마를 추가해 주기 위해 numberWithCommas 함수를 이용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">numberWithCommas</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\B(?=(\\d{3})+(?!\\d))/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">','</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>정규표현식에 관한 정보는 MDN페이지에서 참고할 수 있다.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">MDN: RegExp</a></p>\n<p>결과화면</p>\n<p><img src=\"/4e6d2222275d794b168a6a87c44fd2fa/day6.gif\" alt=\"image\"></p>","frontmatter":{"title":"[JS] Vanilla JavaScript day 6: Ajax Type Ahead","date":"July 30, 2020"}}},"pageContext":{"slug":"/JS/JS30/2020-07-30-Vanilla-JS-6day-review/","previous":{"fields":{"slug":"/JS/2020-07-29-Promise/"},"frontmatter":{"title":"[JS] Promise","category":"JS","draft":false}},"next":{"fields":{"slug":"/JS/JS30/2020-07-30-Vanilla-JS-7day-review/"},"frontmatter":{"title":"[JS] Vanilla JavaScript day 7: Array Cardio Day 2","category":"JS","draft":false}}}}}