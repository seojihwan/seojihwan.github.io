{"componentChunkName":"component---src-templates-blog-post-js","path":"/JS/2020-07-31-Vanilla-JS-8day-review/","result":{"data":{"site":{"siteMetadata":{"title":"서지환의 블로그","author":"[Ji hwan]","siteUrl":"https://seojihwan.github.io","comment":{"disqusShortName":"https-seojihwan-github-io","utterances":"seojihwan/seojihwan.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"e18524d7-07c1-5d59-9a8e-8416c7602633","excerpt":"day 8: HTML 5 Canvas day 8에서는 canvas를 이용하여 화면에 그림을 그려보았다. MDN: Canvas\ncanvas element에 접근하여 getContext()를 실행하면 렌더링할 수 있는 method에 접근할 수 있다. 위에서 2d옵션을 이용하면 CanvasRenderingContext2D 인터페이스를 사용할 수 있다.\nMDN: CanvasRenderingContext2D CanvasRenderingContext2D의 lineCap, lineJoin…","html":"<h3 id=\"day-8-html-5-canvas\" style=\"position:relative;\"><a href=\"#day-8-html-5-canvas\" aria-label=\"day 8 html 5 canvas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>day 8: HTML 5 Canvas</h3>\n<p>day 8에서는 canvas를 이용하여 화면에 그림을 그려보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canvas</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>draw<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>800<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>800<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>canvas</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'draw'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\">MDN: Canvas</a>\ncanvas element에 접근하여 getContext()를 실행하면 렌더링할 수 있는 method에 접근할 수 있다.</p>\n<p>위에서 2d옵션을 이용하면 CanvasRenderingContext2D 인터페이스를 사용할 수 있다.\n<a href=\"https://developer.mozilla.org/ko/docs/Web/API/CanvasRenderingContext2D\">MDN: CanvasRenderingContext2D</a></p>\n<p>CanvasRenderingContext2D의 lineCap, lineJoin, strokeStyle,lineWidth라는 propery 값을 변경해보고 beginPath(),moveTo(),lineTo(),stroke() method를 이용하여 그림을 그려보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ctx<span class=\"token punctuation\">.</span>lineCap <span class=\"token operator\">=</span> <span class=\"token string\">'round'</span>\nctx<span class=\"token punctuation\">.</span>lineJoin <span class=\"token operator\">=</span> <span class=\"token string\">'miter'</span></code></pre></div>\n<p>lineCap은 직선의 끝부분의 모양, lineJoin은 꺾이는 부분의 모양을 설정해 줄 수 있고, strokeStyle을 통해 색상, lineWidth로 두께를 결정해 줄 수 있다.</p>\n<p>beginPath()를 호출할 때 마다 새로운 직선을 그릴 수 있고, moveTo와 lineTo를 이용해 시작지점과 끝지점을 설정한 후 stroke()를 통해 화면에 나타내게 된다.</p>\n<p>마우스의 움직임을 통해 화면에 그려주기 위해서 먼저 window에 이벤트 핸들러를 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isDrawing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousedown'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>offsetX<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>offsetY<span class=\"token punctuation\">]</span>\n  isDrawing <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseup'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  isDrawing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>마우스를 드래그 할때 그려주기 위해서 isDrawing 이라는 변수를 통해 상태를 파악한다.</p>\n<p>또 클릭시점의 좌표를 저장하고, mousemove가 발생할 때 마다 offsetX, offsetY를 x,y로 저장하였다.</p>\n<p>이를 이용해 마우스 버튼을 누른상태에서 움직일 때마다 직선들이 그려질 수 있도록 하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ctx<span class=\"token punctuation\">.</span>strokeStyle <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hsl(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,100%,50%)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>offsetX<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>offsetY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>많은 직선이 짧은 시간안에 그려지기 때문에 자연스러운 곡선을 그릴 수 있다.</p>\n<p>color값과 lineWidth값을 계속 바꿔주어 효과를 넣어보았다.</p>\n<h5 id=\"결과-화면\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC-%ED%99%94%EB%A9%B4\" aria-label=\"결과 화면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과 화면</h5>\n<p><img src=\"/d03446eef908a94a129a99d6c8d59179/day8.gif\" alt=\"image\"></p>","frontmatter":{"title":"[JS] Vanilla JavaScript day 8: HTML 5 Canvas","date":"July 31, 2020"}}},"pageContext":{"slug":"/JS/2020-07-31-Vanilla-JS-8day-review/","previous":{"fields":{"slug":"/JS/2020-07-30-Vanilla-JS-7day-review/"},"frontmatter":{"title":"[JS] Vanilla JavaScript day 7: Array Cardio Day 2","category":"JS","draft":false}},"next":{"fields":{"slug":"/JS/2020-08-04-Async-function/"},"frontmatter":{"title":"[JS] Async-function","category":"JS","draft":false}}}}}