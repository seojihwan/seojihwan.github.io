{"componentChunkName":"component---src-templates-blog-post-js","path":"/JS/2020-05-18-Call-Stack/","result":{"data":{"site":{"siteMetadata":{"title":"서지환의 블로그","author":"[Ji hwan]","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":""},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"35614609-9ff6-5a63-8121-d18d28e7f661","excerpt":"Call Stack 자바스크립트가 함수 실행을 다루는 방법 처리해야할 함수를 Stack에 쌓고 처리한 후 pop 에러가 발생했을 때, 에러메시지는 에러 발생 직전의 Call Stack을 보여줌 위의 코드와 같이 함수 4개를 정의하고 a()를 호출하게되면\nstack에 d c b a 순서로 쌓이는 것을 볼 수 있다. image 개발자 도구의 Sources 탭을 확인하면 Call Stack을 확인할 수 있다. image…","html":"<h3 id=\"call-stack\" style=\"position:relative;\"><a href=\"#call-stack\" aria-label=\"call stack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Call Stack</h3>\n<ul>\n<li>자바스크립트가 함수 실행을 다루는 방법</li>\n<li>처리해야할 함수를 Stack에 쌓고 처리한 후 pop</li>\n<li>에러가 발생했을 때, 에러메시지는 에러 발생 직전의 Call Stack을 보여줌</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">d</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is a d function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">c</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 코드와 같이 함수 4개를 정의하고 a()를 호출하게되면\nstack에 d c b a 순서로 쌓이는 것을 볼 수 있다.</p>\n<p><img src=\"/image/Call%20Stack1.png\" alt=\"image\"></p>\n<p>개발자 도구의 Sources 탭을 확인하면 Call Stack을 확인할 수 있다.</p>\n<p><img src=\"/image/Call%20Stack2.png\" alt=\"image\"></p>\n<p>코드를 계속 해서 진행시키면 로그가 찍힌 후에, 스택이 차례대로 사라지는 것을 볼 수 있다.</p>\n<p>만약에 코드가 진행중에 에러가 발생하면 어떻게 될까??\n<img src=\"/image/Call%20Stack3.png\" alt=\"image\"></p>\n<p>에러 메시지는 에러 발생이전의 Call Stack을 보여준다.\n<img src=\"/image/Call%20Stack4.png\" alt=\"image\"></p>","frontmatter":{"title":"[JS] Call Stack","date":"May 18, 2020"}}},"pageContext":{"slug":"/JS/2020-05-18-Call-Stack/","previous":{"fields":{"slug":"/Algorithm/2020-05-16-BOJ2178/"},"frontmatter":{"title":"백준 2178미로탐색","category":"Algorithm","draft":false}},"next":{"fields":{"slug":"/JS/2020-05-18-Primitive Types/"},"frontmatter":{"title":"[JS] Primitive Types","category":"JS","draft":false}}}}}