{"componentChunkName":"component---src-templates-blog-post-js","path":"/JS/2020-08-06-Vanilla-JS-13day-review/","result":{"data":{"site":{"siteMetadata":{"title":"서지환의 블로그","author":"[Ji hwan]","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":""},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"2863f8ea-7319-519d-982f-590ceb16787e","excerpt":"day 13: Slide in on Scroll day 13에서는 scroll을 감지하여 스크롤의 위치에 따라 이미지가 나타났다 사라지는 효과를 만들어보았다. image 이때 조금만 스크롤을 내려도 많은 이벤트가 발생하기 때문에 성능 상의 문제가 발생할 수 있다. debounce: 연속적으로 이벤트가 발생할때 매 순간 함수를 호출하지 않고 이벤트가 끝났을 때 함수를 호출하는 기법 arguments는 함수에 전달받은 파라미터들을 나타낸다.\n콜백함수로 실행되면 Event와 함수를 호출한 callee…","html":"<h3 id=\"day-13-slide-in-on-scroll\" style=\"position:relative;\"><a href=\"#day-13-slide-in-on-scroll\" aria-label=\"day 13 slide in on scroll permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>day 13: Slide in on Scroll</h3>\n<p>day 13에서는 scroll을 감지하여 스크롤의 위치에 따라 이미지가 나타났다 사라지는 효과를 만들어보았다.</p>\n<p><img src=\"/e1a2179d67c762bda5c219d69a169051/day13.gif\" alt=\"image\"></p>\n<p>이때 조금만 스크롤을 내려도 많은 이벤트가 발생하기 때문에 성능 상의 문제가 발생할 수 있다.</p>\n<h4 id=\"debounce-연속적으로-이벤트가-발생할때-매-순간-함수를-호출하지-않고-이벤트가-끝났을-때-함수를-호출하는-기법\" style=\"position:relative;\"><a href=\"#debounce-%EC%97%B0%EC%86%8D%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%A0%EB%95%8C-%EB%A7%A4-%EC%88%9C%EA%B0%84-%ED%95%A8%EC%88%98%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%95%98%EC%A7%80-%EC%95%8A%EA%B3%A0-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EA%B0%80-%EB%81%9D%EB%82%AC%EC%9D%84-%EB%95%8C-%ED%95%A8%EC%88%98%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%95%98%EB%8A%94-%EA%B8%B0%EB%B2%95\" aria-label=\"debounce 연속적으로 이벤트가 발생할때 매 순간 함수를 호출하지 않고 이벤트가 끝났을 때 함수를 호출하는 기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>debounce: 연속적으로 이벤트가 발생할때 매 순간 함수를 호출하지 않고 이벤트가 끝났을 때 함수를 호출하는 기법</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> wait <span class=\"token operator\">=</span> <span class=\"token number\">20</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> timeout<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    timeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>checkSlide<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>arguments는 함수에 전달받은 파라미터들을 나타낸다.\n콜백함수로 실행되면 Event와 함수를 호출한 callee, iterator정보를 갖게된다.</p>\n<p>scroll이벤트가 발생할 때마다 debounce처리 된 function()이 호출된다.\nsetTimeout을 통해 wait만큼의 대기시간(ms)가 발생하면 전달받은 함수가 실행된다.\n하지만 연속적으로 scroll이벤트가 발생할 때에는 clearTimeout에 의해 해당 setTimeout함수가 취소되므로 마지막 scroll이벤트가 발생하고 일정시간 후 checkSlide함수가 동작하게 된다.</p>\n<h4 id=\"throttle-함수가-호출된-후-일정시간동안-호출되지-않도록-하는-것\" style=\"position:relative;\"><a href=\"#throttle-%ED%95%A8%EC%88%98%EA%B0%80-%ED%98%B8%EC%B6%9C%EB%90%9C-%ED%9B%84-%EC%9D%BC%EC%A0%95%EC%8B%9C%EA%B0%84%EB%8F%99%EC%95%88-%ED%98%B8%EC%B6%9C%EB%90%98%EC%A7%80-%EC%95%8A%EB%8F%84%EB%A1%9D-%ED%95%98%EB%8A%94-%EA%B2%83\" aria-label=\"throttle 함수가 호출된 후 일정시간동안 호출되지 않도록 하는 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>throttle: 함수가 호출된 후 일정시간동안 호출되지 않도록 하는 것</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> wait <span class=\"token operator\">=</span> <span class=\"token number\">20</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> timeout<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>timeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      timeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        timeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>checkSlide<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>scroll이벤트가 발생할 때마다 throttle처리 된 function()이 호출된다.\nsetTimeout을 통해 wait만큼의 대기시간(ms)가 발생하면 전달받은 함수가 실행된다.\nsetTimeout을 실행한 순간 즉각적으로 setTimeout의 id값이 timeout값으로 반환한다.\nsetTimeout함수 내부에 있는 함수는 wait시간을 기다린 후 timeout을 null로 바꾸어 준다.</p>\n<p>따라서 wait시간을 기준으로 함수의 반복호출을 막을 수 있다.</p>\n<h5 id=\"debounce를-이용하여-스크롤을-처리할때에는-스크롤을-멈추지-않는경우-함수가-동작하지-않을-수-있다\" style=\"position:relative;\"><a href=\"#debounce%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EC%8A%A4%ED%81%AC%EB%A1%A4%EC%9D%84-%EC%B2%98%EB%A6%AC%ED%95%A0%EB%95%8C%EC%97%90%EB%8A%94-%EC%8A%A4%ED%81%AC%EB%A1%A4%EC%9D%84-%EB%A9%88%EC%B6%94%EC%A7%80-%EC%95%8A%EB%8A%94%EA%B2%BD%EC%9A%B0-%ED%95%A8%EC%88%98%EA%B0%80-%EB%8F%99%EC%9E%91%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%84-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"debounce를 이용하여 스크롤을 처리할때에는 스크롤을 멈추지 않는경우 함수가 동작하지 않을 수 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>debounce를 이용하여 스크롤을 처리할때에는 스크롤을 멈추지 않는경우 함수가 동작하지 않을 수 있다.</h5>\n<h5 id=\"throttle을-이용할-때에는-debounce보다-더-많은-콜백함수의-실행을-발생시킬-수-있다\" style=\"position:relative;\"><a href=\"#throttle%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%A0-%EB%95%8C%EC%97%90%EB%8A%94-debounce%EB%B3%B4%EB%8B%A4-%EB%8D%94-%EB%A7%8E%EC%9D%80-%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98%EC%9D%98-%EC%8B%A4%ED%96%89%EC%9D%84-%EB%B0%9C%EC%83%9D%EC%8B%9C%ED%82%AC-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"throttle을 이용할 때에는 debounce보다 더 많은 콜백함수의 실행을 발생시킬 수 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>throttle을 이용할 때에는 debounce보다 더 많은 콜백함수의 실행을 발생시킬 수 있다.</h5>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> sliderImages <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.slide-in'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkSlide</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  sliderImages<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sliderImage</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> SlideInAt <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>scrollY <span class=\"token operator\">+</span> window<span class=\"token punctuation\">.</span>innerHeight <span class=\"token operator\">-</span> sliderImage<span class=\"token punctuation\">.</span>height <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> imageBottom <span class=\"token operator\">=</span> sliderImage<span class=\"token punctuation\">.</span>offsetTop <span class=\"token operator\">+</span> sliderImage<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> isHalfShown <span class=\"token operator\">=</span> SlideInAt <span class=\"token operator\">></span> sliderImage<span class=\"token punctuation\">.</span>offsetTop<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> isNotScrolledPast <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>scrollY <span class=\"token operator\">&lt;</span> imageBottom<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isHalfShown <span class=\"token operator\">&amp;&amp;</span> isNotScrolledPast<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sliderImage<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      sliderImage<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 결과물을 만들어 내기 위해서 각각의 slide에 대한 dom에 접근하여,\nscrollY값과 image의 좌표를 비교하여 classList의 추가 삭제를 통한 Slide를 구현하였다.</p>","frontmatter":{"title":"[JS] Vanilla JavaScript day 13: Slide in on Scroll","date":"August 06, 2020"}}},"pageContext":{"slug":"/JS/2020-08-06-Vanilla-JS-13day-review/","previous":{"fields":{"slug":"/JS/2020-08-05-Vanilla-JS-11day-review/"},"frontmatter":{"title":"[JS] Vanilla JavaScript day 11: Custom Video Player","category":"JS","draft":false}},"next":{"fields":{"slug":"/JS/2020-08-08-Vanilla-JS-15day-review/"},"frontmatter":{"title":"[JS] Vanilla JavaScript day 15: LocalStorage","category":"JS","draft":false}}}}}